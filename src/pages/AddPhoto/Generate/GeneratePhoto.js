import React, { useContext, useEffect, useState, useRef } from 'react';
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from 'yup';
import axios from "axios";
import { useNavigate } from "react-router-dom";
// import styles from "./formStyles.module.scss";
import { AuthCtx } from "../../../services/AuthCtx";
import formStyles from "../../../styles/form.module.scss";
import styles from "./styles.module.scss";

export const GeneratePhoto = () => {
  // initialize state values
  const [file, setFile] = useState('');
  const navigate = useNavigate();
  const { authState } = useContext(AuthCtx);
  const [isLoading, setIsLoading] = useState(false);
  const [status, setStatus] = useState('');
  const [promptValue, setPromptValue] = useState('');
  const textAreaRef = useRef(null);


  const initialValues = {
    title: "",
    description: "",
    // file: {},
  }

  useEffect(() => {
    if (!localStorage.getItem('accessToken')) { //!authState.status
      navigate("/login");
    }
  }, []);

  const validationSchema = Yup.object().shape({
    title: Yup.string().required("Required"),
    description: Yup.string().required("Required"),
    // file: Yup.mixed(),
  })

  const onSubmit = async (data) => {
    setIsLoading(true);

    const formData = new FormData();

    console.log(file);
    console.log(data);

    formData.append('b64', file);
    formData.append('title', data.title);
    formData.append('description', data.description);

    axios.post(`${process.env.REACT_APP_API_ROUTE}/photos`, formData, { headers: { accessToken: localStorage.getItem("accessToken") } })
      .then(response => {
        // PUT request was successful
        // console.log("PUT:", response);
        setStatus("Photo saved!");

        setIsLoading(false);
      }).catch(error => {
        // Handle error
        setStatus(error.message);
        console.error('Error updating data:', error);
        setIsLoading(false);
      })
  }

  const generatePhoto = async () => {
    setIsLoading(true);

    const data = {
      "prompt": promptValue,
      "n": 1,
      "size": "512x512",
      "response_format": "b64_json"
    };

    await axios.post(`${process.env.REACT_APP_API_ROUTE}/generate`, data).then(res => {
      setFile(res.data.data[0].b64_json);
      setIsLoading(false);
      setStatus("New image generated")
    }).catch(err => {
      setIsLoading(false);
      setStatus(err.response.data.message);
    })
  }

  // Update state when prompt is changed
  const handlePromptChange = (event) => {
    setPromptValue(event.target.value);
    resizeTextArea();
  };

  // Check for "Enter" key press
  const handleKeyPress = (event) => {
    if (event.key === 'Enter') {
      generatePhoto();
    }
  };

  const resizeTextArea = () => {
    if (textAreaRef.current) {
      textAreaRef.current.style.height = 'inherit';  // Reset height to "auto" to shrink in case content decreases
      textAreaRef.current.style.height = `${textAreaRef.current.scrollHeight}px`;  // Adjust height based on scrollHeight
    }
  };

  useEffect(() => {
    resizeTextArea();  // Resize on mount for initial content
  }, []);

  return (
    <div className={styles.generate}>
      <div className={formStyles.container}>

        <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>
          <Form className={formStyles.form}>

            {status ? (
              <>
                <p>{status}</p>
              </>
            ) : (
              <></>
            )}

            <textarea
              ref={textAreaRef}
              value={promptValue}
              onChange={handlePromptChange}
              onKeyPress={handleKeyPress}
              placeholder="Type something..."
              style={{ overflowY: 'hidden' }}  // Hide vertical scrollbar
            />

            <button type="button" onClick={generatePhoto}>Generate Photo</button>

            {isLoading ? (
              <>
                <img src="logo.png" className={styles.spinner} alt="." />
              </>
            ) : (
              <></>
            )}

            {file ? (
              <>
                <Field className={formStyles.input} id="inputTitle" name="title" placeholder="Title" />
                <ErrorMessage name="title" component="span" className={formStyles.error} />

                <Field className={formStyles.input} id="inputDescr" name="description" placeholder="Description" />
                <ErrorMessage name="description" component="span" className={formStyles.error} />

                <button type="submit">Save Photo</button>
                <img src={`data:image/jpeg;base64,${file}`} alt="generated by dalle" />
              </>
            ) : (
              <></>
            )}
          </Form>
        </Formik>
      </div>
    </div>
  )
}
